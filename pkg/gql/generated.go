// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// CreatePropertyMutationCreateProperty includes the requested fields of the GraphQL type Property.
type CreatePropertyMutationCreateProperty struct {
	Id               string                                      `json:"id"`
	Bedrooms         int                                         `json:"bedrooms"`
	Owner            string                                      `json:"owner"`
	Bathrooms        float64                                     `json:"bathrooms"`
	Sqft             int                                         `json:"sqft"`
	TotalUnits       int                                         `json:"totalUnits"`
	TotalVacantUnits int                                         `json:"totalVacantUnits"`
	IsVacant         bool                                        `json:"isVacant"`
	Address          CreatePropertyMutationCreatePropertyAddress `json:"address"`
	PropertyType     PropertyType                                `json:"propertyType"`
}

// GetId returns CreatePropertyMutationCreateProperty.Id, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetId() string { return v.Id }

// GetBedrooms returns CreatePropertyMutationCreateProperty.Bedrooms, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetBedrooms() int { return v.Bedrooms }

// GetOwner returns CreatePropertyMutationCreateProperty.Owner, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetOwner() string { return v.Owner }

// GetBathrooms returns CreatePropertyMutationCreateProperty.Bathrooms, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetBathrooms() float64 { return v.Bathrooms }

// GetSqft returns CreatePropertyMutationCreateProperty.Sqft, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetSqft() int { return v.Sqft }

// GetTotalUnits returns CreatePropertyMutationCreateProperty.TotalUnits, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetTotalUnits() int { return v.TotalUnits }

// GetTotalVacantUnits returns CreatePropertyMutationCreateProperty.TotalVacantUnits, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetTotalVacantUnits() int { return v.TotalVacantUnits }

// GetIsVacant returns CreatePropertyMutationCreateProperty.IsVacant, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetIsVacant() bool { return v.IsVacant }

// GetAddress returns CreatePropertyMutationCreateProperty.Address, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetAddress() CreatePropertyMutationCreatePropertyAddress {
	return v.Address
}

// GetPropertyType returns CreatePropertyMutationCreateProperty.PropertyType, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreateProperty) GetPropertyType() PropertyType { return v.PropertyType }

// CreatePropertyMutationCreatePropertyAddress includes the requested fields of the GraphQL type Address.
type CreatePropertyMutationCreatePropertyAddress struct {
	City    string `json:"city"`
	State   string `json:"state"`
	Street1 string `json:"street1"`
	ZipCode string `json:"zipCode"`
}

// GetCity returns CreatePropertyMutationCreatePropertyAddress.City, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreatePropertyAddress) GetCity() string { return v.City }

// GetState returns CreatePropertyMutationCreatePropertyAddress.State, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreatePropertyAddress) GetState() string { return v.State }

// GetStreet1 returns CreatePropertyMutationCreatePropertyAddress.Street1, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreatePropertyAddress) GetStreet1() string { return v.Street1 }

// GetZipCode returns CreatePropertyMutationCreatePropertyAddress.ZipCode, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationCreatePropertyAddress) GetZipCode() string { return v.ZipCode }

// CreatePropertyMutationResponse is returned by CreatePropertyMutation on success.
type CreatePropertyMutationResponse struct {
	CreateProperty CreatePropertyMutationCreateProperty `json:"createProperty"`
}

// GetCreateProperty returns CreatePropertyMutationResponse.CreateProperty, and is useful for accessing the field via an interface.
func (v *CreatePropertyMutationResponse) GetCreateProperty() CreatePropertyMutationCreateProperty {
	return v.CreateProperty
}

// CreateUnitMutationCreateUnit includes the requested fields of the GraphQL type Unit.
type CreateUnitMutationCreateUnit struct {
	Id              string                              `json:"id"`
	PropertyUnitsId string                              `json:"propertyUnitsId"`
	Bedrooms        int                                 `json:"bedrooms"`
	Bathrooms       float64                             `json:"bathrooms"`
	Sqft            int                                 `json:"sqft"`
	IsVacant        bool                                `json:"isVacant"`
	Address         CreateUnitMutationCreateUnitAddress `json:"address"`
}

// GetId returns CreateUnitMutationCreateUnit.Id, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnit) GetId() string { return v.Id }

// GetPropertyUnitsId returns CreateUnitMutationCreateUnit.PropertyUnitsId, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnit) GetPropertyUnitsId() string { return v.PropertyUnitsId }

// GetBedrooms returns CreateUnitMutationCreateUnit.Bedrooms, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnit) GetBedrooms() int { return v.Bedrooms }

// GetBathrooms returns CreateUnitMutationCreateUnit.Bathrooms, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnit) GetBathrooms() float64 { return v.Bathrooms }

// GetSqft returns CreateUnitMutationCreateUnit.Sqft, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnit) GetSqft() int { return v.Sqft }

// GetIsVacant returns CreateUnitMutationCreateUnit.IsVacant, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnit) GetIsVacant() bool { return v.IsVacant }

// GetAddress returns CreateUnitMutationCreateUnit.Address, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnit) GetAddress() CreateUnitMutationCreateUnitAddress {
	return v.Address
}

// CreateUnitMutationCreateUnitAddress includes the requested fields of the GraphQL type Address.
type CreateUnitMutationCreateUnitAddress struct {
	City    string `json:"city"`
	State   string `json:"state"`
	Street1 string `json:"street1"`
	ZipCode string `json:"zipCode"`
}

// GetCity returns CreateUnitMutationCreateUnitAddress.City, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnitAddress) GetCity() string { return v.City }

// GetState returns CreateUnitMutationCreateUnitAddress.State, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnitAddress) GetState() string { return v.State }

// GetStreet1 returns CreateUnitMutationCreateUnitAddress.Street1, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnitAddress) GetStreet1() string { return v.Street1 }

// GetZipCode returns CreateUnitMutationCreateUnitAddress.ZipCode, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationCreateUnitAddress) GetZipCode() string { return v.ZipCode }

// CreateUnitMutationResponse is returned by CreateUnitMutation on success.
type CreateUnitMutationResponse struct {
	CreateUnit CreateUnitMutationCreateUnit `json:"createUnit"`
}

// GetCreateUnit returns CreateUnitMutationResponse.CreateUnit, and is useful for accessing the field via an interface.
func (v *CreateUnitMutationResponse) GetCreateUnit() CreateUnitMutationCreateUnit {
	return v.CreateUnit
}

// DeletePropertyMutationDeleteProperty includes the requested fields of the GraphQL type Property.
type DeletePropertyMutationDeleteProperty struct {
	Id string `json:"id"`
}

// GetId returns DeletePropertyMutationDeleteProperty.Id, and is useful for accessing the field via an interface.
func (v *DeletePropertyMutationDeleteProperty) GetId() string { return v.Id }

// DeletePropertyMutationResponse is returned by DeletePropertyMutation on success.
type DeletePropertyMutationResponse struct {
	DeleteProperty DeletePropertyMutationDeleteProperty `json:"deleteProperty"`
}

// GetDeleteProperty returns DeletePropertyMutationResponse.DeleteProperty, and is useful for accessing the field via an interface.
func (v *DeletePropertyMutationResponse) GetDeleteProperty() DeletePropertyMutationDeleteProperty {
	return v.DeleteProperty
}

// GetPropertyListPropertiesModelPropertyConnection includes the requested fields of the GraphQL type ModelPropertyConnection.
type GetPropertyListPropertiesModelPropertyConnection struct {
	Items []GetPropertyListPropertiesModelPropertyConnectionItemsProperty `json:"items"`
}

// GetItems returns GetPropertyListPropertiesModelPropertyConnection.Items, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnection) GetItems() []GetPropertyListPropertiesModelPropertyConnectionItemsProperty {
	return v.Items
}

// GetPropertyListPropertiesModelPropertyConnectionItemsProperty includes the requested fields of the GraphQL type Property.
type GetPropertyListPropertiesModelPropertyConnectionItemsProperty struct {
	Id           string                                                               `json:"id"`
	Bedrooms     int                                                                  `json:"bedrooms"`
	Bathrooms    float64                                                              `json:"bathrooms"`
	Owner        string                                                               `json:"owner"`
	Sqft         int                                                                  `json:"sqft"`
	IsVacant     bool                                                                 `json:"isVacant"`
	Address      GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress `json:"address"`
	PropertyType PropertyType                                                         `json:"propertyType"`
}

// GetId returns GetPropertyListPropertiesModelPropertyConnectionItemsProperty.Id, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsProperty) GetId() string { return v.Id }

// GetBedrooms returns GetPropertyListPropertiesModelPropertyConnectionItemsProperty.Bedrooms, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsProperty) GetBedrooms() int {
	return v.Bedrooms
}

// GetBathrooms returns GetPropertyListPropertiesModelPropertyConnectionItemsProperty.Bathrooms, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsProperty) GetBathrooms() float64 {
	return v.Bathrooms
}

// GetOwner returns GetPropertyListPropertiesModelPropertyConnectionItemsProperty.Owner, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsProperty) GetOwner() string {
	return v.Owner
}

// GetSqft returns GetPropertyListPropertiesModelPropertyConnectionItemsProperty.Sqft, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsProperty) GetSqft() int { return v.Sqft }

// GetIsVacant returns GetPropertyListPropertiesModelPropertyConnectionItemsProperty.IsVacant, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsProperty) GetIsVacant() bool {
	return v.IsVacant
}

// GetAddress returns GetPropertyListPropertiesModelPropertyConnectionItemsProperty.Address, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsProperty) GetAddress() GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress {
	return v.Address
}

// GetPropertyType returns GetPropertyListPropertiesModelPropertyConnectionItemsProperty.PropertyType, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsProperty) GetPropertyType() PropertyType {
	return v.PropertyType
}

// GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress includes the requested fields of the GraphQL type Address.
type GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress struct {
	City    string `json:"city"`
	State   string `json:"state"`
	Street1 string `json:"street1"`
	ZipCode string `json:"zipCode"`
}

// GetCity returns GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress.City, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress) GetCity() string {
	return v.City
}

// GetState returns GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress.State, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress) GetState() string {
	return v.State
}

// GetStreet1 returns GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress.Street1, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress) GetStreet1() string {
	return v.Street1
}

// GetZipCode returns GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress.ZipCode, and is useful for accessing the field via an interface.
func (v *GetPropertyListPropertiesModelPropertyConnectionItemsPropertyAddress) GetZipCode() string {
	return v.ZipCode
}

// GetPropertyResponse is returned by GetProperty on success.
type GetPropertyResponse struct {
	ListProperties GetPropertyListPropertiesModelPropertyConnection `json:"listProperties"`
}

// GetListProperties returns GetPropertyResponse.ListProperties, and is useful for accessing the field via an interface.
func (v *GetPropertyResponse) GetListProperties() GetPropertyListPropertiesModelPropertyConnection {
	return v.ListProperties
}

// ListOwnerPropertiesQueryListPropertiesModelPropertyConnection includes the requested fields of the GraphQL type ModelPropertyConnection.
type ListOwnerPropertiesQueryListPropertiesModelPropertyConnection struct {
	Items []ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty `json:"items"`
}

// GetItems returns ListOwnerPropertiesQueryListPropertiesModelPropertyConnection.Items, and is useful for accessing the field via an interface.
func (v *ListOwnerPropertiesQueryListPropertiesModelPropertyConnection) GetItems() []ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty {
	return v.Items
}

// ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty includes the requested fields of the GraphQL type Property.
type ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty struct {
	Owner   string                                                                            `json:"owner"`
	Id      string                                                                            `json:"id"`
	Address ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress `json:"address"`
}

// GetOwner returns ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty.Owner, and is useful for accessing the field via an interface.
func (v *ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty) GetOwner() string {
	return v.Owner
}

// GetId returns ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty.Id, and is useful for accessing the field via an interface.
func (v *ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty) GetId() string {
	return v.Id
}

// GetAddress returns ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty.Address, and is useful for accessing the field via an interface.
func (v *ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsProperty) GetAddress() ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress {
	return v.Address
}

// ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress includes the requested fields of the GraphQL type Address.
type ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress struct {
	City    string `json:"city"`
	State   string `json:"state"`
	Street1 string `json:"street1"`
	ZipCode string `json:"zipCode"`
}

// GetCity returns ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress.City, and is useful for accessing the field via an interface.
func (v *ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress) GetCity() string {
	return v.City
}

// GetState returns ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress.State, and is useful for accessing the field via an interface.
func (v *ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress) GetState() string {
	return v.State
}

// GetStreet1 returns ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress.Street1, and is useful for accessing the field via an interface.
func (v *ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress) GetStreet1() string {
	return v.Street1
}

// GetZipCode returns ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress.ZipCode, and is useful for accessing the field via an interface.
func (v *ListOwnerPropertiesQueryListPropertiesModelPropertyConnectionItemsPropertyAddress) GetZipCode() string {
	return v.ZipCode
}

// ListOwnerPropertiesQueryResponse is returned by ListOwnerPropertiesQuery on success.
type ListOwnerPropertiesQueryResponse struct {
	ListProperties ListOwnerPropertiesQueryListPropertiesModelPropertyConnection `json:"listProperties"`
}

// GetListProperties returns ListOwnerPropertiesQueryResponse.ListProperties, and is useful for accessing the field via an interface.
func (v *ListOwnerPropertiesQueryResponse) GetListProperties() ListOwnerPropertiesQueryListPropertiesModelPropertyConnection {
	return v.ListProperties
}

// ListUnitsListUnitsModelUnitConnection includes the requested fields of the GraphQL type ModelUnitConnection.
type ListUnitsListUnitsModelUnitConnection struct {
	Items []ListUnitsListUnitsModelUnitConnectionItemsUnit `json:"items"`
}

// GetItems returns ListUnitsListUnitsModelUnitConnection.Items, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnection) GetItems() []ListUnitsListUnitsModelUnitConnectionItemsUnit {
	return v.Items
}

// ListUnitsListUnitsModelUnitConnectionItemsUnit includes the requested fields of the GraphQL type Unit.
type ListUnitsListUnitsModelUnitConnectionItemsUnit struct {
	Id              string                                                `json:"id"`
	PropertyUnitsId string                                                `json:"propertyUnitsId"`
	Bedrooms        int                                                   `json:"bedrooms"`
	Bathrooms       float64                                               `json:"bathrooms"`
	Sqft            int                                                   `json:"sqft"`
	IsVacant        bool                                                  `json:"isVacant"`
	Address         ListUnitsListUnitsModelUnitConnectionItemsUnitAddress `json:"address"`
}

// GetId returns ListUnitsListUnitsModelUnitConnectionItemsUnit.Id, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnit) GetId() string { return v.Id }

// GetPropertyUnitsId returns ListUnitsListUnitsModelUnitConnectionItemsUnit.PropertyUnitsId, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnit) GetPropertyUnitsId() string {
	return v.PropertyUnitsId
}

// GetBedrooms returns ListUnitsListUnitsModelUnitConnectionItemsUnit.Bedrooms, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnit) GetBedrooms() int { return v.Bedrooms }

// GetBathrooms returns ListUnitsListUnitsModelUnitConnectionItemsUnit.Bathrooms, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnit) GetBathrooms() float64 { return v.Bathrooms }

// GetSqft returns ListUnitsListUnitsModelUnitConnectionItemsUnit.Sqft, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnit) GetSqft() int { return v.Sqft }

// GetIsVacant returns ListUnitsListUnitsModelUnitConnectionItemsUnit.IsVacant, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnit) GetIsVacant() bool { return v.IsVacant }

// GetAddress returns ListUnitsListUnitsModelUnitConnectionItemsUnit.Address, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnit) GetAddress() ListUnitsListUnitsModelUnitConnectionItemsUnitAddress {
	return v.Address
}

// ListUnitsListUnitsModelUnitConnectionItemsUnitAddress includes the requested fields of the GraphQL type Address.
type ListUnitsListUnitsModelUnitConnectionItemsUnitAddress struct {
	City    string `json:"city"`
	State   string `json:"state"`
	Street1 string `json:"street1"`
	ZipCode string `json:"zipCode"`
}

// GetCity returns ListUnitsListUnitsModelUnitConnectionItemsUnitAddress.City, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnitAddress) GetCity() string { return v.City }

// GetState returns ListUnitsListUnitsModelUnitConnectionItemsUnitAddress.State, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnitAddress) GetState() string { return v.State }

// GetStreet1 returns ListUnitsListUnitsModelUnitConnectionItemsUnitAddress.Street1, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnitAddress) GetStreet1() string { return v.Street1 }

// GetZipCode returns ListUnitsListUnitsModelUnitConnectionItemsUnitAddress.ZipCode, and is useful for accessing the field via an interface.
func (v *ListUnitsListUnitsModelUnitConnectionItemsUnitAddress) GetZipCode() string { return v.ZipCode }

// ListUnitsResponse is returned by ListUnits on success.
type ListUnitsResponse struct {
	ListUnits ListUnitsListUnitsModelUnitConnection `json:"listUnits"`
}

// GetListUnits returns ListUnitsResponse.ListUnits, and is useful for accessing the field via an interface.
func (v *ListUnitsResponse) GetListUnits() ListUnitsListUnitsModelUnitConnection { return v.ListUnits }

type PropertyType string

const (
	PropertyTypeCondo        PropertyType = "condo"
	PropertyTypeMultifamily  PropertyType = "multiFamily"
	PropertyTypeSinglefamily PropertyType = "singleFamily"
	PropertyTypeTownhouse    PropertyType = "townhouse"
	PropertyTypeUnknown      PropertyType = "unknown"
)

// UpdatePropertyMutationResponse is returned by UpdatePropertyMutation on success.
type UpdatePropertyMutationResponse struct {
	UpdateProperty UpdatePropertyMutationUpdateProperty `json:"updateProperty"`
}

// GetUpdateProperty returns UpdatePropertyMutationResponse.UpdateProperty, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationResponse) GetUpdateProperty() UpdatePropertyMutationUpdateProperty {
	return v.UpdateProperty
}

// UpdatePropertyMutationUpdateProperty includes the requested fields of the GraphQL type Property.
type UpdatePropertyMutationUpdateProperty struct {
	Id               string                                      `json:"id"`
	Bedrooms         int                                         `json:"bedrooms"`
	Owner            string                                      `json:"owner"`
	Bathrooms        float64                                     `json:"bathrooms"`
	TotalUnits       int                                         `json:"totalUnits"`
	TotalVacantUnits int                                         `json:"totalVacantUnits"`
	Sqft             int                                         `json:"sqft"`
	IsVacant         bool                                        `json:"isVacant"`
	Address          UpdatePropertyMutationUpdatePropertyAddress `json:"address"`
	PropertyType     PropertyType                                `json:"propertyType"`
}

// GetId returns UpdatePropertyMutationUpdateProperty.Id, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetId() string { return v.Id }

// GetBedrooms returns UpdatePropertyMutationUpdateProperty.Bedrooms, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetBedrooms() int { return v.Bedrooms }

// GetOwner returns UpdatePropertyMutationUpdateProperty.Owner, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetOwner() string { return v.Owner }

// GetBathrooms returns UpdatePropertyMutationUpdateProperty.Bathrooms, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetBathrooms() float64 { return v.Bathrooms }

// GetTotalUnits returns UpdatePropertyMutationUpdateProperty.TotalUnits, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetTotalUnits() int { return v.TotalUnits }

// GetTotalVacantUnits returns UpdatePropertyMutationUpdateProperty.TotalVacantUnits, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetTotalVacantUnits() int { return v.TotalVacantUnits }

// GetSqft returns UpdatePropertyMutationUpdateProperty.Sqft, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetSqft() int { return v.Sqft }

// GetIsVacant returns UpdatePropertyMutationUpdateProperty.IsVacant, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetIsVacant() bool { return v.IsVacant }

// GetAddress returns UpdatePropertyMutationUpdateProperty.Address, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetAddress() UpdatePropertyMutationUpdatePropertyAddress {
	return v.Address
}

// GetPropertyType returns UpdatePropertyMutationUpdateProperty.PropertyType, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdateProperty) GetPropertyType() PropertyType { return v.PropertyType }

// UpdatePropertyMutationUpdatePropertyAddress includes the requested fields of the GraphQL type Address.
type UpdatePropertyMutationUpdatePropertyAddress struct {
	City    string `json:"city"`
	State   string `json:"state"`
	Street1 string `json:"street1"`
	ZipCode string `json:"zipCode"`
}

// GetCity returns UpdatePropertyMutationUpdatePropertyAddress.City, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdatePropertyAddress) GetCity() string { return v.City }

// GetState returns UpdatePropertyMutationUpdatePropertyAddress.State, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdatePropertyAddress) GetState() string { return v.State }

// GetStreet1 returns UpdatePropertyMutationUpdatePropertyAddress.Street1, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdatePropertyAddress) GetStreet1() string { return v.Street1 }

// GetZipCode returns UpdatePropertyMutationUpdatePropertyAddress.ZipCode, and is useful for accessing the field via an interface.
func (v *UpdatePropertyMutationUpdatePropertyAddress) GetZipCode() string { return v.ZipCode }

// UpdateUnitMutationResponse is returned by UpdateUnitMutation on success.
type UpdateUnitMutationResponse struct {
	UpdateUnit UpdateUnitMutationUpdateUnit `json:"updateUnit"`
}

// GetUpdateUnit returns UpdateUnitMutationResponse.UpdateUnit, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationResponse) GetUpdateUnit() UpdateUnitMutationUpdateUnit {
	return v.UpdateUnit
}

// UpdateUnitMutationUpdateUnit includes the requested fields of the GraphQL type Unit.
type UpdateUnitMutationUpdateUnit struct {
	Id              string                              `json:"id"`
	PropertyUnitsId string                              `json:"propertyUnitsId"`
	Bedrooms        int                                 `json:"bedrooms"`
	Bathrooms       float64                             `json:"bathrooms"`
	Sqft            int                                 `json:"sqft"`
	IsVacant        bool                                `json:"isVacant"`
	Address         UpdateUnitMutationUpdateUnitAddress `json:"address"`
}

// GetId returns UpdateUnitMutationUpdateUnit.Id, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnit) GetId() string { return v.Id }

// GetPropertyUnitsId returns UpdateUnitMutationUpdateUnit.PropertyUnitsId, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnit) GetPropertyUnitsId() string { return v.PropertyUnitsId }

// GetBedrooms returns UpdateUnitMutationUpdateUnit.Bedrooms, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnit) GetBedrooms() int { return v.Bedrooms }

// GetBathrooms returns UpdateUnitMutationUpdateUnit.Bathrooms, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnit) GetBathrooms() float64 { return v.Bathrooms }

// GetSqft returns UpdateUnitMutationUpdateUnit.Sqft, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnit) GetSqft() int { return v.Sqft }

// GetIsVacant returns UpdateUnitMutationUpdateUnit.IsVacant, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnit) GetIsVacant() bool { return v.IsVacant }

// GetAddress returns UpdateUnitMutationUpdateUnit.Address, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnit) GetAddress() UpdateUnitMutationUpdateUnitAddress {
	return v.Address
}

// UpdateUnitMutationUpdateUnitAddress includes the requested fields of the GraphQL type Address.
type UpdateUnitMutationUpdateUnitAddress struct {
	City    string `json:"city"`
	State   string `json:"state"`
	Street1 string `json:"street1"`
	ZipCode string `json:"zipCode"`
}

// GetCity returns UpdateUnitMutationUpdateUnitAddress.City, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnitAddress) GetCity() string { return v.City }

// GetState returns UpdateUnitMutationUpdateUnitAddress.State, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnitAddress) GetState() string { return v.State }

// GetStreet1 returns UpdateUnitMutationUpdateUnitAddress.Street1, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnitAddress) GetStreet1() string { return v.Street1 }

// GetZipCode returns UpdateUnitMutationUpdateUnitAddress.ZipCode, and is useful for accessing the field via an interface.
func (v *UpdateUnitMutationUpdateUnitAddress) GetZipCode() string { return v.ZipCode }

// __CreatePropertyMutationInput is used internally by genqlient
type __CreatePropertyMutationInput struct {
	Id               string       `json:"id"`
	Owner            string       `json:"owner"`
	City             string       `json:"city"`
	State            string       `json:"state"`
	Street1          string       `json:"street1"`
	Street2          string       `json:"street2"`
	ZipCode          string       `json:"zipCode"`
	Bedrooms         int          `json:"bedrooms"`
	Bathrooms        float64      `json:"bathrooms"`
	Sqft             int          `json:"sqft"`
	IsVacant         bool         `json:"isVacant"`
	PropertyType     PropertyType `json:"propertyType"`
	TotalUnits       int          `json:"totalUnits"`
	TotalVacantUnits int          `json:"totalVacantUnits"`
}

// GetId returns __CreatePropertyMutationInput.Id, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetId() string { return v.Id }

// GetOwner returns __CreatePropertyMutationInput.Owner, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetOwner() string { return v.Owner }

// GetCity returns __CreatePropertyMutationInput.City, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetCity() string { return v.City }

// GetState returns __CreatePropertyMutationInput.State, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetState() string { return v.State }

// GetStreet1 returns __CreatePropertyMutationInput.Street1, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetStreet1() string { return v.Street1 }

// GetStreet2 returns __CreatePropertyMutationInput.Street2, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetStreet2() string { return v.Street2 }

// GetZipCode returns __CreatePropertyMutationInput.ZipCode, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetZipCode() string { return v.ZipCode }

// GetBedrooms returns __CreatePropertyMutationInput.Bedrooms, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetBedrooms() int { return v.Bedrooms }

// GetBathrooms returns __CreatePropertyMutationInput.Bathrooms, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetBathrooms() float64 { return v.Bathrooms }

// GetSqft returns __CreatePropertyMutationInput.Sqft, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetSqft() int { return v.Sqft }

// GetIsVacant returns __CreatePropertyMutationInput.IsVacant, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetIsVacant() bool { return v.IsVacant }

// GetPropertyType returns __CreatePropertyMutationInput.PropertyType, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetPropertyType() PropertyType { return v.PropertyType }

// GetTotalUnits returns __CreatePropertyMutationInput.TotalUnits, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetTotalUnits() int { return v.TotalUnits }

// GetTotalVacantUnits returns __CreatePropertyMutationInput.TotalVacantUnits, and is useful for accessing the field via an interface.
func (v *__CreatePropertyMutationInput) GetTotalVacantUnits() int { return v.TotalVacantUnits }

// __CreateUnitMutationInput is used internally by genqlient
type __CreateUnitMutationInput struct {
	Id              string  `json:"id"`
	PropertyUnitsId string  `json:"propertyUnitsId"`
	City            string  `json:"city"`
	State           string  `json:"state"`
	Street1         string  `json:"street1"`
	Street2         string  `json:"street2"`
	ZipCode         string  `json:"zipCode"`
	Bedrooms        int     `json:"bedrooms"`
	Bathrooms       float64 `json:"bathrooms"`
	Sqft            int     `json:"sqft"`
	IsVacant        bool    `json:"isVacant"`
}

// GetId returns __CreateUnitMutationInput.Id, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetId() string { return v.Id }

// GetPropertyUnitsId returns __CreateUnitMutationInput.PropertyUnitsId, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetPropertyUnitsId() string { return v.PropertyUnitsId }

// GetCity returns __CreateUnitMutationInput.City, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetCity() string { return v.City }

// GetState returns __CreateUnitMutationInput.State, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetState() string { return v.State }

// GetStreet1 returns __CreateUnitMutationInput.Street1, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetStreet1() string { return v.Street1 }

// GetStreet2 returns __CreateUnitMutationInput.Street2, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetStreet2() string { return v.Street2 }

// GetZipCode returns __CreateUnitMutationInput.ZipCode, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetZipCode() string { return v.ZipCode }

// GetBedrooms returns __CreateUnitMutationInput.Bedrooms, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetBedrooms() int { return v.Bedrooms }

// GetBathrooms returns __CreateUnitMutationInput.Bathrooms, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetBathrooms() float64 { return v.Bathrooms }

// GetSqft returns __CreateUnitMutationInput.Sqft, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetSqft() int { return v.Sqft }

// GetIsVacant returns __CreateUnitMutationInput.IsVacant, and is useful for accessing the field via an interface.
func (v *__CreateUnitMutationInput) GetIsVacant() bool { return v.IsVacant }

// __DeletePropertyMutationInput is used internally by genqlient
type __DeletePropertyMutationInput struct {
	Id string `json:"id"`
}

// GetId returns __DeletePropertyMutationInput.Id, and is useful for accessing the field via an interface.
func (v *__DeletePropertyMutationInput) GetId() string { return v.Id }

// __GetPropertyInput is used internally by genqlient
type __GetPropertyInput struct {
	Id string `json:"id"`
}

// GetId returns __GetPropertyInput.Id, and is useful for accessing the field via an interface.
func (v *__GetPropertyInput) GetId() string { return v.Id }

// __ListOwnerPropertiesQueryInput is used internally by genqlient
type __ListOwnerPropertiesQueryInput struct {
	Owner string `json:"owner"`
}

// GetOwner returns __ListOwnerPropertiesQueryInput.Owner, and is useful for accessing the field via an interface.
func (v *__ListOwnerPropertiesQueryInput) GetOwner() string { return v.Owner }

// __ListUnitsInput is used internally by genqlient
type __ListUnitsInput struct {
	Id string `json:"id"`
}

// GetId returns __ListUnitsInput.Id, and is useful for accessing the field via an interface.
func (v *__ListUnitsInput) GetId() string { return v.Id }

// __UpdatePropertyMutationInput is used internally by genqlient
type __UpdatePropertyMutationInput struct {
	Id               string       `json:"id"`
	Bedrooms         int          `json:"bedrooms"`
	Bathrooms        float64      `json:"bathrooms"`
	Sqft             int          `json:"sqft"`
	IsVacant         bool         `json:"isVacant"`
	PropertyType     PropertyType `json:"propertyType"`
	TotalUnits       int          `json:"totalUnits"`
	TotalVacantUnits int          `json:"totalVacantUnits"`
}

// GetId returns __UpdatePropertyMutationInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdatePropertyMutationInput) GetId() string { return v.Id }

// GetBedrooms returns __UpdatePropertyMutationInput.Bedrooms, and is useful for accessing the field via an interface.
func (v *__UpdatePropertyMutationInput) GetBedrooms() int { return v.Bedrooms }

// GetBathrooms returns __UpdatePropertyMutationInput.Bathrooms, and is useful for accessing the field via an interface.
func (v *__UpdatePropertyMutationInput) GetBathrooms() float64 { return v.Bathrooms }

// GetSqft returns __UpdatePropertyMutationInput.Sqft, and is useful for accessing the field via an interface.
func (v *__UpdatePropertyMutationInput) GetSqft() int { return v.Sqft }

// GetIsVacant returns __UpdatePropertyMutationInput.IsVacant, and is useful for accessing the field via an interface.
func (v *__UpdatePropertyMutationInput) GetIsVacant() bool { return v.IsVacant }

// GetPropertyType returns __UpdatePropertyMutationInput.PropertyType, and is useful for accessing the field via an interface.
func (v *__UpdatePropertyMutationInput) GetPropertyType() PropertyType { return v.PropertyType }

// GetTotalUnits returns __UpdatePropertyMutationInput.TotalUnits, and is useful for accessing the field via an interface.
func (v *__UpdatePropertyMutationInput) GetTotalUnits() int { return v.TotalUnits }

// GetTotalVacantUnits returns __UpdatePropertyMutationInput.TotalVacantUnits, and is useful for accessing the field via an interface.
func (v *__UpdatePropertyMutationInput) GetTotalVacantUnits() int { return v.TotalVacantUnits }

// __UpdateUnitMutationInput is used internally by genqlient
type __UpdateUnitMutationInput struct {
	Id              string  `json:"id"`
	PropertyUnitsId string  `json:"propertyUnitsId"`
	Bedrooms        int     `json:"bedrooms"`
	Bathrooms       float64 `json:"bathrooms"`
	Sqft            int     `json:"sqft"`
	IsVacant        bool    `json:"isVacant"`
}

// GetId returns __UpdateUnitMutationInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateUnitMutationInput) GetId() string { return v.Id }

// GetPropertyUnitsId returns __UpdateUnitMutationInput.PropertyUnitsId, and is useful for accessing the field via an interface.
func (v *__UpdateUnitMutationInput) GetPropertyUnitsId() string { return v.PropertyUnitsId }

// GetBedrooms returns __UpdateUnitMutationInput.Bedrooms, and is useful for accessing the field via an interface.
func (v *__UpdateUnitMutationInput) GetBedrooms() int { return v.Bedrooms }

// GetBathrooms returns __UpdateUnitMutationInput.Bathrooms, and is useful for accessing the field via an interface.
func (v *__UpdateUnitMutationInput) GetBathrooms() float64 { return v.Bathrooms }

// GetSqft returns __UpdateUnitMutationInput.Sqft, and is useful for accessing the field via an interface.
func (v *__UpdateUnitMutationInput) GetSqft() int { return v.Sqft }

// GetIsVacant returns __UpdateUnitMutationInput.IsVacant, and is useful for accessing the field via an interface.
func (v *__UpdateUnitMutationInput) GetIsVacant() bool { return v.IsVacant }

func CreatePropertyMutation(
	ctx context.Context,
	client graphql.Client,
	id string,
	owner string,
	city string,
	state string,
	street1 string,
	street2 string,
	zipCode string,
	bedrooms int,
	bathrooms float64,
	sqft int,
	isVacant bool,
	propertyType PropertyType,
	totalUnits int,
	totalVacantUnits int,
) (*CreatePropertyMutationResponse, error) {
	req := &graphql.Request{
		OpName: "CreatePropertyMutation",
		Query: `
mutation CreatePropertyMutation ($id: ID, $owner: String!, $city: String!, $state: String!, $street1: String!, $street2: String, $zipCode: String!, $bedrooms: Int, $bathrooms: Float, $sqft: Int, $isVacant: Boolean, $propertyType: PropertyType, $totalUnits: Int, $totalVacantUnits: Int) {
	createProperty(input: {address:{city:$city,state:$state,street1:$street1,street2:$street2,zipCode:$zipCode},owner:$owner,id:$id,bedrooms:$bedrooms,bathrooms:$bathrooms,sqft:$sqft,isVacant:$isVacant,propertyType:$propertyType,totalUnits:$totalUnits,totalVacantUnits:$totalVacantUnits}) {
		id
		bedrooms
		owner
		bathrooms
		sqft
		totalUnits
		totalVacantUnits
		isVacant
		address {
			city
			state
			street1
			zipCode
		}
		propertyType
	}
}
`,
		Variables: &__CreatePropertyMutationInput{
			Id:               id,
			Owner:            owner,
			City:             city,
			State:            state,
			Street1:          street1,
			Street2:          street2,
			ZipCode:          zipCode,
			Bedrooms:         bedrooms,
			Bathrooms:        bathrooms,
			Sqft:             sqft,
			IsVacant:         isVacant,
			PropertyType:     propertyType,
			TotalUnits:       totalUnits,
			TotalVacantUnits: totalVacantUnits,
		},
	}
	var err error

	var data CreatePropertyMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateUnitMutation(
	ctx context.Context,
	client graphql.Client,
	id string,
	propertyUnitsId string,
	city string,
	state string,
	street1 string,
	street2 string,
	zipCode string,
	bedrooms int,
	bathrooms float64,
	sqft int,
	isVacant bool,
) (*CreateUnitMutationResponse, error) {
	req := &graphql.Request{
		OpName: "CreateUnitMutation",
		Query: `
mutation CreateUnitMutation ($id: ID, $propertyUnitsId: ID!, $city: String!, $state: String!, $street1: String!, $street2: String, $zipCode: String!, $bedrooms: Int, $bathrooms: Float, $sqft: Int, $isVacant: Boolean) {
	createUnit(input: {address:{city:$city,state:$state,street1:$street1,street2:$street2,zipCode:$zipCode},id:$id,propertyUnitsId:$propertyUnitsId,bedrooms:$bedrooms,bathrooms:$bathrooms,sqft:$sqft,isVacant:$isVacant}) {
		id
		propertyUnitsId
		bedrooms
		bathrooms
		sqft
		isVacant
		address {
			city
			state
			street1
			zipCode
		}
	}
}
`,
		Variables: &__CreateUnitMutationInput{
			Id:              id,
			PropertyUnitsId: propertyUnitsId,
			City:            city,
			State:           state,
			Street1:         street1,
			Street2:         street2,
			ZipCode:         zipCode,
			Bedrooms:        bedrooms,
			Bathrooms:       bathrooms,
			Sqft:            sqft,
			IsVacant:        isVacant,
		},
	}
	var err error

	var data CreateUnitMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeletePropertyMutation(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeletePropertyMutationResponse, error) {
	req := &graphql.Request{
		OpName: "DeletePropertyMutation",
		Query: `
mutation DeletePropertyMutation ($id: ID!) {
	deleteProperty(input: {id:$id}) {
		id
	}
}
`,
		Variables: &__DeletePropertyMutationInput{
			Id: id,
		},
	}
	var err error

	var data DeletePropertyMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetProperty(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetPropertyResponse, error) {
	req := &graphql.Request{
		OpName: "GetProperty",
		Query: `
query GetProperty ($id: ID!) {
	listProperties(limit: 20000, id: $id) {
		items {
			id
			bedrooms
			bathrooms
			owner
			sqft
			isVacant
			address {
				city
				state
				street1
				zipCode
			}
			propertyType
		}
	}
}
`,
		Variables: &__GetPropertyInput{
			Id: id,
		},
	}
	var err error

	var data GetPropertyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ListOwnerPropertiesQuery(
	ctx context.Context,
	client graphql.Client,
	owner string,
) (*ListOwnerPropertiesQueryResponse, error) {
	req := &graphql.Request{
		OpName: "ListOwnerPropertiesQuery",
		Query: `
query ListOwnerPropertiesQuery ($owner: String!) {
	listProperties(limit: 20000, filter: {owner:{eq:$owner}}) {
		items {
			owner
			id
			address {
				city
				state
				street1
				zipCode
			}
		}
	}
}
`,
		Variables: &__ListOwnerPropertiesQueryInput{
			Owner: owner,
		},
	}
	var err error

	var data ListOwnerPropertiesQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ListUnits(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*ListUnitsResponse, error) {
	req := &graphql.Request{
		OpName: "ListUnits",
		Query: `
query ListUnits ($id: ID!) {
	listUnits(limit: 1, id: $id) {
		items {
			id
			propertyUnitsId
			bedrooms
			bathrooms
			sqft
			isVacant
			address {
				city
				state
				street1
				zipCode
			}
		}
	}
}
`,
		Variables: &__ListUnitsInput{
			Id: id,
		},
	}
	var err error

	var data ListUnitsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdatePropertyMutation(
	ctx context.Context,
	client graphql.Client,
	id string,
	bedrooms int,
	bathrooms float64,
	sqft int,
	isVacant bool,
	propertyType PropertyType,
	totalUnits int,
	totalVacantUnits int,
) (*UpdatePropertyMutationResponse, error) {
	req := &graphql.Request{
		OpName: "UpdatePropertyMutation",
		Query: `
mutation UpdatePropertyMutation ($id: ID!, $bedrooms: Int, $bathrooms: Float, $sqft: Int, $isVacant: Boolean, $propertyType: PropertyType, $totalUnits: Int, $totalVacantUnits: Int) {
	updateProperty(input: {id:$id,bedrooms:$bedrooms,bathrooms:$bathrooms,sqft:$sqft,isVacant:$isVacant,propertyType:$propertyType,totalUnits:$totalUnits,totalVacantUnits:$totalVacantUnits}) {
		id
		bedrooms
		owner
		bathrooms
		totalUnits
		totalVacantUnits
		sqft
		isVacant
		address {
			city
			state
			street1
			zipCode
		}
		propertyType
	}
}
`,
		Variables: &__UpdatePropertyMutationInput{
			Id:               id,
			Bedrooms:         bedrooms,
			Bathrooms:        bathrooms,
			Sqft:             sqft,
			IsVacant:         isVacant,
			PropertyType:     propertyType,
			TotalUnits:       totalUnits,
			TotalVacantUnits: totalVacantUnits,
		},
	}
	var err error

	var data UpdatePropertyMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateUnitMutation(
	ctx context.Context,
	client graphql.Client,
	id string,
	propertyUnitsId string,
	bedrooms int,
	bathrooms float64,
	sqft int,
	isVacant bool,
) (*UpdateUnitMutationResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateUnitMutation",
		Query: `
mutation UpdateUnitMutation ($id: ID!, $propertyUnitsId: ID!, $bedrooms: Int, $bathrooms: Float, $sqft: Int, $isVacant: Boolean) {
	updateUnit(input: {id:$id,propertyUnitsId:$propertyUnitsId,bedrooms:$bedrooms,bathrooms:$bathrooms,sqft:$sqft,isVacant:$isVacant}) {
		id
		propertyUnitsId
		bedrooms
		bathrooms
		sqft
		isVacant
		address {
			city
			state
			street1
			zipCode
		}
	}
}
`,
		Variables: &__UpdateUnitMutationInput{
			Id:              id,
			PropertyUnitsId: propertyUnitsId,
			Bedrooms:        bedrooms,
			Bathrooms:       bathrooms,
			Sqft:            sqft,
			IsVacant:        isVacant,
		},
	}
	var err error

	var data UpdateUnitMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
